# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Copy application.yml into runner         #application.yml을 복사해서 러너로 가져옴.
        run: |
          touch ./server/9in/src/main/resources/application.yml
          echo "${{secrets.APPLICATION_YML}}" > ./server/9in/src/main/resources/application.yml

      - name: Grant Execute Permission For Gradlew & Build gradle
        run: |
          cd ./server/9in
          chmod +x gradlew
          ./gradlew build 

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Docker hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Deploy with SSH
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master

      - name: Docker image build
        run: |
          cd ./server/9in
          docker build -t ${{ secrets.DOCKERHUB_ID }}/9uin-server .


      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_ID }}/9uin-server

      - name: Deploy with SSH
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master

        with:
          host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }} # pem 키
          port: ${{ secrets.PORT }} # ssh port (22)
          envs: GITHUB_SHA
          script: |
            script: |
            docker login -u ${{ secrets.DOCKERHUB_ID }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            docker stop jisi
            docker rm jisi
            docker network disconnect redis-network jisi
            docker rmi ${{ secrets.DOCKERHUB_ID }}/jisi:latest
            docker pull ${{ secrets.DOCKERHUB_ID }}/jisi:latest
            docker run -d -p 80:8080 --name jisi ${{ secrets.DOCKERHUB_ID }}/jisi:latest
            docker network connect redis-network jisi

  deploy:

    runs-on: ubuntu-latest
    permissions: write-all
    needs: build

    steps:
      - uses: actions/checkout@v3
